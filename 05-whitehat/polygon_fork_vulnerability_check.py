# polygon_fork_vulnerability_check.py

"""
Alpha Challenge - Polygon Fork Vulnerability Analysis
=====================================================

a) Identified Polygon forks potentially vulnerable:

1. Dogechain:
   - Polygon Edge fork
   - GitHub: https://github.com/dogechain-lab/dogechain

2. Manta Pacific:
   - Polygon SDK stack
   - GitHub: https://github.com/manta-network

These chains launched after 2021 and may still use pre-patch Polygon code.

b) Code to check whether target repos contain potentially vulnerable function (e.g. old MerkleValidator):

We attempt to detect whether the given file contains a known unpatched function signature or logic.

Note: This static check uses GitHub API and inspects source code in public repositories.

c) Estimated potential loss if both chains are vulnerable:

- Dogechain: ~$15–20M at risk (bridge + ERC20 tokens)
- Manta Pacific: ~$40–60M at risk (L2 + treasury + DEX liquidity)

→ Combined loss could exceed $60–80M depending on how funds are bridged or wrapped.

"""

import requests
import base64

def check_file_in_repo(repo_url, file_path, pattern):
    """Checks whether a file in a GitHub repo contains a given code pattern."""
    api_url = repo_url.replace("https://github.com", "https://api.github.com/repos")
    content_url = f"{api_url}/contents/{file_path}"
    response = requests.get(content_url)
    if response.status_code == 200:
        content = response.json()
        if 'content' in content:
            code = base64.b64decode(content['content']).decode()
            return pattern in code
    return False

if __name__ == "__main__":
    repos = [
        "https://github.com/dogechain-lab/dogechain",
        "https://github.com/manta-network/manta-pacific"
    ]
    target_file = "contracts/MerkleValidator.sol"  # Adjust to actual path
    pattern = "function verify(bytes32[] memory proof"  # Example vulnerable function signature

    print("Checking for potential Merkle proof vulnerability...")
    for repo in repos:
        result = check_file_in_repo(repo, target_file, pattern)
        print(f"{repo} vulnerable? {'Yes' if result else 'No or Not Found'}")
